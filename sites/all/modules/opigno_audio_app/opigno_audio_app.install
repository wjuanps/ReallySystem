<?php

/**
 * @file
 * Contains install instructions and logic
 */

function opigno_audio_app_field_schema($field) {
  return array(
    'columns' => array(
      'fid' => array(
        'description' => 'The {file_managed}.fid being referenced in this field.',
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'display' => array(
        'description' => 'Flag to control whether this file should be displayed when viewing content.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'description' => array(
        'description' => 'A description of the file.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'fid' => array('fid'),
    ),
    'foreign keys' => array(
      'fid' => array(
        'table' => 'file_managed',
        'columns' => array('fid' => 'fid'),
      ),
    ),
  );
}

/**
 * Implements hook_install().
 */
function opigno_audio_app_install() {
  // Check if content type exists.
  $type = node_type_load("audio");
  if (empty($type)) {
    $type = node_type_set_defaults(array(
      'type' => 'audio',
      'name' => 'Audio',
      'base' => 'node_content',
      'description' => 'A audio',
      'has_title' => '1',
      'title_label' => 'Title',
      'help' => '',
    ));
    node_type_save($type);
    node_add_body_field($type);
  }

  if (module_exists('comment')) {
    variable_set('comment_audio', COMMENT_NODE_CLOSED);
  }
  variable_set('node_submitted_audio', 0);
  if (module_exists('print')) {
    variable_set('print_display_audio', 0);
    variable_set('print_display_urllist_audio', 0);
    variable_set('print_pdf_display_audio', 0);
    variable_set('print_pdf_display_urllist_audio', 0);
  }

  include_once drupal_get_path('module', 'og') . '/og_ui/og_ui.module';
  if (function_exists('og_ui_node_type_save')) {
    variable_set("og_group_content_type_audio", TRUE);
    og_ui_node_type_save('audio');
    opigno_audio_app_update_og_group_ref();
    if (module_exists('og_access')) {
      og_create_field(OG_CONTENT_ACCESS_FIELD, 'node', 'audio');
      opigno_audio_app_update_og_content_access();
    }
  }

  $field = field_info_field('opigno_audio');
  if (empty($field)) {
    field_create_field(array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'display_field' => 0,
        'display_default' => 0,
        'uri_scheme' => 'public',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_opigno_audio' => array(
                'fid' => 'opigno_audio_fid',
                'display' => 'opigno_audio_display',
                'description' => 'opigno_audio_description',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_opigno_audio' => array(
                'fid' => 'opigno_audio_fid',
                'display' => 'opigno_audio_display',
                'description' => 'opigno_audio_description',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'fid' => array(
          'table' => 'file_managed',
          'columns' => array(
            'fid' => 'fid',
          ),
        ),
      ),
      'indexes' => array(
        'fid' => array(
          'fid',
        ),
      ),
      'field_name' => 'opigno_audio',
      'type' => 'opigno_audio',
      'module' => 'opigno_audio_app',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'fid' => array(
          'description' => 'The {file_managed}.fid being referenced in this field.',
          'type' => 'int',
          'not null' => FALSE,
          'unsigned' => TRUE,
        ),
        'display' => array(
          'description' => 'Flag to control whether this file should be displayed when viewing content.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 1,
        ),
        'description' => array(
          'description' => 'A description of the file.',
          'type' => 'text',
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'audio',
        ),
      ),
    ));
  }

  $instance = field_info_instance('node', 'opigno_audio', 'audio');
  if (empty($instance)) {
    field_create_instance(array(
      'label' => 'Audiofile',
      'widget' => array(
        'weight' => '34',
        'type' => 'file_generic',
        'module' => 'file',
        'active' => 1,
        'settings' => array(
          'progress_indicator' => 'throbber',
        ),
      ),
      'settings' => array(
        'file_directory' => '',
        'file_extensions' => 'mp3',
        'max_filesize' => '',
        'description_field' => 0,
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'opigno_audio_formatter',
          'settings' => array(),
          'module' => 'opigno_audio_app',
          'weight' => 3,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => 0,
      'description' => '',
      'field_name' => 'opigno_audio',
      'entity_type' => 'node',
      'bundle' => 'audio',
      'deleted' => '0',
    ));
  }

  if (node_type_load('quiz_directions') !== FALSE) {
    $instance = field_info_instance('node', 'opigno_audio', 'quiz_directions');
    if (empty($instance)) {
      field_create_instance(array(
        'label' => 'Audiofile',
        'widget' => array(
          'weight' => '32',
          'type' => 'file_generic',
          'module' => 'file',
          'active' => 1,
          'settings' => array(
            'progress_indicator' => 'throbber',
          ),
        ),
        'settings' => array(
          'file_directory' => '',
          'file_extensions' => 'mp3',
          'max_filesize' => '',
          'description_field' => 0,
          'user_register_form' => FALSE,
        ),
        'display' => array(
          'default' => array(
            'label' => 'above',
            'type' => 'opigno_audio_formatter',
            'settings' => array(),
            'module' => 'opigno_audio_app',
            'weight' => 2,
          ),
          'teaser' => array(
            'label' => 'above',
            'type' => 'opigno_audio_formatter',
            'weight' => '1',
            'settings' => array(),
            'module' => 'opigno_audio_app',
          ),
          'question' => array(
            'label' => 'hidden',
            'type' => 'opigno_audio_formatter',
            'settings' => array(),
            'module' => 'opigno_audio_app',
            'weight' => 2,
          ),
        ),
        'required' => 0,
        'description' => '',
        'field_name' => 'opigno_audio',
        'entity_type' => 'node',
        'bundle' => 'quiz_directions',
        'deleted' => '0',
      ));
    }
  }
  
  opigno_audio_app_permissions_set();
  // If we're in distribution context, refresh the strings and translations.
  if (function_exists('opigno_lms_refresh_strings_and_import')) {
    opigno_lms_refresh_strings_and_import(array('field'));
  }
}

/**
 * Hook_uninstall.
 */
function opigno_audio_app_uninstall() {
  node_type_delete('audio');
}

/**
 * Alters the og_group_ref_instance().
 */
function opigno_audio_app_update_og_group_ref() {
  if (module_exists("entityreference_prepopulate")) {
    $instance = field_info_instance('node', 'og_group_ref', 'audio');
    if (!empty($instance)) {
      $instance['default_value_function'] = 'entityreference_prepopulate_field_default_value';
      $instance['settings']['behaviors']['prepopulate'] = array(
        'action' => 'none',
        'action_on_edit' => 0,
        'fallback' => 'none',
        'og_context' => 0,
        'skip_perm' => 0,
        'status' => 1,
      );
    }
    $instance['display'] = array(
      'default' => array(
        'label' => 'hidden',
        'settings' => array(),
        'weight' => 1,
        'type' => 'hidden'
      ),
      'teaser' => array(
        'label' => 'hidden',
        'settings' => array(),
        'type' => 'hidden',
      ),
    );
    field_update_instance($instance);
  }
}

/**
 * Alters the og_group_ref_instance().
 */
function opigno_audio_app_update_og_content_access() {
  $instance = field_info_instance('node', 'group_content_access', 'audio');
  if (!empty($instance)) {
    $instance['display'] = array(
      'default' => array(
        'label' => 'hidden',
        'settings' => array(),
        'weight' => 1,
        'type' => 'hidden'
      ),
      'teaser' => array(
        'label' => 'hidden',
        'settings' => array(),
        'type' => 'hidden',
      ),
    );
    field_update_instance($instance);
  }
}

/**
 * Sets the default permissions.
 */
function opigno_audio_app_permissions_set() {
  // In distribution context.
  if (defined('OPIGNO_LMS_COURSE_STUDENT_ROLE')) {
    $course_admin = opigno_lms_get_role_id(OPIGNO_LMS_COURSE_ADMIN_ROLE);
    $course_coach = opigno_lms_get_role_id(OPIGNO_LMS_COURSE_COACH_ROLE);
    $course_teacher = opigno_lms_get_role_id(OPIGNO_LMS_COURSE_TEACHER_ROLE);
    $course_student = opigno_lms_get_role_id(OPIGNO_LMS_COURSE_STUDENT_ROLE);
    $course_moderator = opigno_lms_get_role_id(OPIGNO_LMS_COURSE_MODERATOR_ROLE);

    og_role_grant_permissions($course_admin, array(
      'delete any audio content',
      'update any audio content',
      'delete own audio content',
      'update own audio content',
      'create audio content',
      'access audio content',
      'sort audios',
    ));
    og_role_grant_permissions($course_coach, array(
      'delete own audio content',
      'update own audio content',
      'create audio content',
      'access audio content',
      'sort audios',
    ));
    og_role_grant_permissions($course_teacher, array(
      'delete own audio content',
      'update own audio content',
      'create audio content',
      'access audio content',
      'sort audios',
    ));
    og_role_grant_permissions($course_student, array('access audio content'));
    og_role_grant_permissions($course_moderator, array('access audio content'));

    $administrator = user_role_load_by_name('administrator');
    $administrator_permissions = array(
      'create audio content',
      'edit own audio content',
      'edit any audio content',
      'delete own audio content',
      'delete any audio content',
    );
    user_role_grant_permissions($administrator->rid, $administrator_permissions);

    $authenticated = user_role_load_by_name('authenticated user');
    $authenticated_permissions = array('edit own audio content');
    user_role_grant_permissions($authenticated->rid, $authenticated_permissions);

    $forum_admin = user_role_load_by_name('forum administrator');
    $forum_admin_permissions = array('edit own audio content');
    user_role_grant_permissions($forum_admin->rid, $forum_admin_permissions);

    $student_manager = user_role_load_by_name('student manager');
    $student_manager_permissions = array(
      'create audio content',
      'edit own audio content',
      'delete own audio content',
    );
    user_role_grant_permissions($student_manager->rid, $student_manager_permissions);
  }
}

/**
 * Implements hook_schema().
 */
function opigno_audio_app_schema() {
  return array(
    'opigno_audio_app_audio_sort' => array(
      'fields' => array(
        'gid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'audio_nid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        'weight' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => '0',
        ),
      ),
      'indexes' => array(
        'audio_group_id' => array('gid'),
        'audio_audio_id' => array('audio_nid'),
      ),
    ),
  );
}
