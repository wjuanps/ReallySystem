<?php

/**
 * @file
 * Define module hooks and API.
 */

define('OPIGNO_PRETEST_APP_VIEW_REALM', 'opigno_pretest_app_view_pretest');
define('OPIGNO_PRETEST_APP_RESTRICT_REALM', 'opigno_pretest_app_restrict_pretest');
define('OPIGNO_PRETEST_APP_EDIT_REALM', 'opigno_pretest_app_edit_pretest');

/**
 * Implements hook_menu_alter().
 */
function opigno_pretest_app_menu_alter(&$items) {
  $items['node/%node/take']['access callback'] = 'opigno_pretest_app_take_access';
}

/**
 * Implements hook_node_view().
 */
function opigno_pretest_app_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'quiz' && opigno_pretest_app_is_pretest($node)) {
    if (empty($node->content['take'])) {
      $available = quiz_availability($node);
      if ($available) {
        if (opigno_pretest_app_take_access($node)) {
          if ($view_mode == 'full') {
            $quiz_form = drupal_get_form('quiz_start_quiz_button_form', $node);
            $node->content['take'] = array(
              '#markup' => drupal_render($quiz_form),
              '#weight' => 2,
            );
          }
          else {
            $node->content['take'] = array(
              '#markup' =>  l(t('Start quiz'), 'node/' . $node->nid . '/take'),
              '#weight' => 2,
            );
          }
        }
      }
    }
  }
}

/**
 * Custom access callback for taking quiz.
 *
 * @param stdClass $node
 *
 * @return bool
 */
function opigno_pretest_app_take_access($node) {
  if ($node->type == 'quiz' && opigno_pretest_app_is_pretest($node)) {
    global $user;
    $groups = og_get_entity_groups('node', $node);
    foreach ($groups as $entity_type => $entity_groups) {
      foreach ($entity_groups as $etid => $gid) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'og_membership', '=')
          ->propertyCondition('gid', $gid, '=')
          ->propertyCondition('entity_type', 'user', '=')
          ->propertyCondition('etid', $user->uid, '=');
        $result = $query->execute();

        if (!empty($result['og_membership'])) {
          $og_membership = og_membership_load(current($result['og_membership'])->id);
          if ($og_membership->state == OG_STATE_PENDING) {
            return TRUE;
          }
        }
      }
    }

    return FALSE;
  }
  else {
    return og_quiz_take_access($node);
  }
}

/**
 * Implements hook_node_access_records().
 */
function opigno_pretest_app_node_access_records($node) {
  $grants = array();

  if ($node->type == 'quiz' && opigno_pretest_app_is_pretest($node)) {
    foreach (og_get_entity_groups('node', $node) as $entity_groups) {
      foreach ($entity_groups as $gid) {
        $grants[] = array(
          'realm' => OPIGNO_PRETEST_APP_RESTRICT_REALM,
          'gid' => $gid,
          'grant_view' => 0,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );

        $grants[] = array(
          'realm' => OPIGNO_PRETEST_APP_VIEW_REALM,
          'gid' => $gid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 10,
        );

        $grants[] = array(
          'realm' => OPIGNO_PRETEST_APP_EDIT_REALM,
          'gid' => $node->uid,
          'grant_view' => 1,
          'grant_update' => 1,
          'grant_delete' => 0,
          'priority' => 10,
        );
      }
    }
  }

  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function opigno_pretest_app_node_grants($account, $op) {
  $grants = array();

  if ($op == 'view') {
    foreach (og_get_entity_groups('user', $account, array(OG_STATE_ACTIVE, OG_STATE_PENDING)) as $entity_groups) {
      foreach ($entity_groups as $og_membership_id => $gid) {
        $og_membershp = og_membership_load($og_membership_id);
        if ($og_membershp->state == OG_STATE_ACTIVE && !og_user_access('node', $gid, 'always see pretest', $account)) {
          $grants[OPIGNO_PRETEST_APP_RESTRICT_REALM][] = $gid;
        }
        elseif ($og_membershp->state == OG_STATE_ACTIVE && og_user_access('node', $gid, 'always see pretest', $account)) {
          $grants[OPIGNO_PRETEST_APP_VIEW_REALM][] = $gid;
        }
        elseif ($og_membershp->state == OG_STATE_PENDING) {
          $grants[OPIGNO_PRETEST_APP_VIEW_REALM][] = $gid;
        }
      }
    }
  }

  if ($op == 'edit') {
    $grants[OPIGNO_PRETEST_APP_EDIT_REALM] = array($account->uid);
  }

  return $grants;
}

/**
 * Implements hook_og_permission().
 */
function opigno_pretest_app_og_permission() {
  return array(
    'skip pretest when added as a member' => array(
      'title' => t("Skip the pretest when added as a member"),
      'description' => t("Whenever a user with this permission is added, even if he didn't answer the pretest, his membership get's approved."),
    ),
    'always see pretest' => array(
      'title' => t("Always see the pretest, even when it has been taken already."),
    )
  );
}

/**
 * Implements hook_og_role_grant().
 */
function opigno_pretest_app_og_role_grant($entity_type, $gid, $uid, $rid) {
  $account = user_load($uid, TRUE);

  if ($entity_type == 'node') {
    if (!og_user_access($entity_type, $gid, 'skip pretest when added as a member', $account)) {
      // Get the pretest score for the user.
      $quiz = opigno_pretest_app_fetch_pretest(node_load($gid));

      if (isset($quiz)) {
        $score = @current(quiz_get_score_data(array($quiz->nid), $uid));

        // If the user already passed the pre-test, don't deactivate his membership.
        if (empty($score->percent_score) || $score->percent_score < $score->percent_pass) {
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'og_membership', '=')
                ->propertyCondition('gid', $gid, '=')
                ->propertyCondition('entity_type', 'user', '=')
                ->propertyCondition('etid', $uid, '=');
          $result = $query->execute();

          if (!empty($result['og_membership'])) {
            $og_membership = og_membership_load(current($result['og_membership'])->id);
            if ($og_membership->state == OG_STATE_ACTIVE) {
              $og_membership->state = OG_STATE_PENDING;
              og_membership_save($og_membership);
              drupal_set_message(t("The membership for %user was temporarily set to <em>pending</em>. She must first accomplish the pre-test to get full access to this group.", array('%user' => $account->name)), 'warning', FALSE);
            }
          }
        }
      }
    }
    else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'og_membership', '=')
        ->propertyCondition('gid', $gid, '=')
        ->propertyCondition('entity_type', 'user', '=')
        ->propertyCondition('etid', $uid, '=');
      $result = $query->execute();

      if (!empty($result['og_membership'])) {
        $og_membership = og_membership_load(current($result['og_membership'])->id);
        if ($og_membership->state == OG_STATE_PENDING) {
          $og_membership->state = OG_STATE_ACTIVE;
          og_membership_save($og_membership);
        }
      }
    }
  }
}

/**
 * Implements hook_og_role_revoke().
 */
function opigno_pretest_app_og_role_revoke($entity_type, $gid, $uid, $rid) {
  opigno_pretest_app_og_role_grant($entity_type, $gid, $uid, $rid);
}

/**
 * Implements hook_block_info().
 */
function opigno_pretest_app_block_info() {
  return array(
    'opigno_pretest_app_pretest' => array(
      'info' => t("Opigno course pretest"),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function opigno_pretest_app_block_view() {
  $content = '';
  $context = og_context();

  if (!empty($context) && $context['group_type'] == 'node') {
    $group = node_load($context['gid']);
    $quiz = opigno_pretest_app_fetch_pretest($group);
    if (node_access('view', $quiz)) {
      $content = render(node_view($quiz, 'teaser'));
    }
  }

  return array(
    'subject' => '<none>',
    'content' => $content,
  );
}

/**
 * Check if the quiz is a pretest somewhere.
 *
 * @param  stdClass $node
 *
 * @return bool
 */
function opigno_pretest_app_is_pretest($node) {
  if ($node->type == 'quiz') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition('course_pretest_ref', 'target_id', $node->nid, '=');
    $result = $query->execute();

    return !empty($result['node']);
  }
  else {
    return FALSE;
  }
}

/**
 * Fetch the required quiz.
 *
 * @param  stdClass $node
 *
 * @return stdClass|null
 */
function opigno_pretest_app_fetch_pretest($node) {
  if (isset($node->course_pretest_ref[LANGUAGE_NONE])) {
    return node_load($node->course_pretest_ref[LANGUAGE_NONE][0]['target_id']);
  }

  return NULL;
}
